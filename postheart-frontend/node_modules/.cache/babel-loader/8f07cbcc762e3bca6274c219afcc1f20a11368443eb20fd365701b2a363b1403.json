{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\nexport function getPagedAsyncIterator(pagedResult) {\n  const iter = getItemAsyncIterator(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    byPage: pagedResult?.byPage ?? (settings => {\n      const {\n        continuationToken,\n        maxPageSize\n      } = settings ?? {};\n      return getPageAsyncIterator(pagedResult, {\n        pageLink: continuationToken,\n        maxPageSize\n      });\n    })\n  };\n}\nasync function* getItemAsyncIterator(pagedResult) {\n  const pages = getPageAsyncIterator(pagedResult);\n  const firstVal = await pages.next();\n  // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n  if (!Array.isArray(firstVal.value)) {\n    // can extract elements from this page\n    const {\n      toElements\n    } = pagedResult;\n    if (toElements) {\n      yield* toElements(firstVal.value);\n      for await (const page of pages) {\n        yield* toElements(page);\n      }\n    } else {\n      yield firstVal.value;\n      // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n      yield* pages;\n    }\n  } else {\n    yield* firstVal.value;\n    for await (const page of pages) {\n      // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n      // it must be the case that `TPage = TElement[]`\n      yield* page;\n    }\n  }\n}\nasync function* getPageAsyncIterator(pagedResult, options = {}) {\n  const {\n    pageLink,\n    maxPageSize\n  } = options;\n  let response = await pagedResult.getPage(pageLink ?? pagedResult.firstPageLink, maxPageSize);\n  if (!response) {\n    return;\n  }\n  yield response.page;\n  while (response.nextPageLink) {\n    response = await pagedResult.getPage(response.nextPageLink, maxPageSize);\n    if (!response) {\n      return;\n    }\n    yield response.page;\n  }\n}","map":{"version":3,"names":["getPagedAsyncIterator","pagedResult","iter","getItemAsyncIterator","next","Symbol","asyncIterator","byPage","settings","continuationToken","maxPageSize","getPageAsyncIterator","pageLink","pages","firstVal","Array","isArray","value","toElements","page","options","response","getPage","firstPageLink","nextPageLink"],"sources":["C:\\Users\\leoda\\OneDrive\\Documents\\GitHub\\PostHeart-Frontend\\node_modules\\@azure\\core-paging\\src\\getPagedAsyncIterator.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { PageSettings, PagedAsyncIterableIterator, PagedResult } from \"./models.js\";\n\n/**\n * returns an async iterator that iterates over results. It also has a `byPage`\n * method that returns pages of items at once.\n *\n * @param pagedResult - an object that specifies how to get pages.\n * @returns a paged async iterator that iterates over results.\n */\n\nexport function getPagedAsyncIterator<\n  TElement,\n  TPage = TElement[],\n  TPageSettings = PageSettings,\n  TLink = string,\n>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>,\n): PagedAsyncIterableIterator<TElement, TPage, TPageSettings> {\n  const iter = getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(pagedResult);\n  return {\n    next() {\n      return iter.next();\n    },\n    [Symbol.asyncIterator]() {\n      return this;\n    },\n    byPage:\n      pagedResult?.byPage ??\n      (((settings?: PageSettings) => {\n        const { continuationToken, maxPageSize } = settings ?? {};\n        return getPageAsyncIterator(pagedResult, {\n          pageLink: continuationToken as unknown as TLink | undefined,\n          maxPageSize,\n        });\n      }) as unknown as (settings?: TPageSettings) => AsyncIterableIterator<TPage>),\n  };\n}\n\nasync function* getItemAsyncIterator<TElement, TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>,\n): AsyncIterableIterator<TElement> {\n  const pages = getPageAsyncIterator(pagedResult);\n  const firstVal = await pages.next();\n  // if the result does not have an array shape, i.e. TPage = TElement, then we return it as is\n  if (!Array.isArray(firstVal.value)) {\n    // can extract elements from this page\n    const { toElements } = pagedResult;\n    if (toElements) {\n      yield* toElements(firstVal.value) as TElement[];\n      for await (const page of pages) {\n        yield* toElements(page) as TElement[];\n      }\n    } else {\n      yield firstVal.value;\n      // `pages` is of type `AsyncIterableIterator<TPage>` but TPage = TElement in this case\n      yield* pages as unknown as AsyncIterableIterator<TElement>;\n    }\n  } else {\n    yield* firstVal.value;\n    for await (const page of pages) {\n      // pages is of type `AsyncIterableIterator<TPage>` so `page` is of type `TPage`. In this branch,\n      // it must be the case that `TPage = TElement[]`\n      yield* page as unknown as TElement[];\n    }\n  }\n}\n\nasync function* getPageAsyncIterator<TPage, TLink, TPageSettings>(\n  pagedResult: PagedResult<TPage, TPageSettings, TLink>,\n  options: {\n    maxPageSize?: number;\n    pageLink?: TLink;\n  } = {},\n): AsyncIterableIterator<TPage> {\n  const { pageLink, maxPageSize } = options;\n  let response = await pagedResult.getPage(pageLink ?? pagedResult.firstPageLink, maxPageSize);\n  if (!response) {\n    return;\n  }\n  yield response.page;\n  while (response.nextPageLink) {\n    response = await pagedResult.getPage(response.nextPageLink, maxPageSize);\n    if (!response) {\n      return;\n    }\n    yield response.page;\n  }\n}\n"],"mappings":"AAAA;AACA;AAIA;;;;;;;AAQA,OAAM,SAAUA,qBAAqBA,CAMnCC,WAAqD;EAErD,MAAMC,IAAI,GAAGC,oBAAoB,CAAwCF,WAAW,CAAC;EACrF,OAAO;IACLG,IAAIA,CAAA;MACF,OAAOF,IAAI,CAACE,IAAI,EAAE;IACpB,CAAC;IACD,CAACC,MAAM,CAACC,aAAa,IAAC;MACpB,OAAO,IAAI;IACb,CAAC;IACDC,MAAM,EACJN,WAAW,EAAEM,MAAM,KAChBC,QAAuB,IAAI;MAC5B,MAAM;QAAEC,iBAAiB;QAAEC;MAAW,CAAE,GAAGF,QAAQ,IAAI,EAAE;MACzD,OAAOG,oBAAoB,CAACV,WAAW,EAAE;QACvCW,QAAQ,EAAEH,iBAAiD;QAC3DC;OACD,CAAC;IACJ,CAAC;GACJ;AACH;AAEA,gBAAgBP,oBAAoBA,CAClCF,WAAqD;EAErD,MAAMY,KAAK,GAAGF,oBAAoB,CAACV,WAAW,CAAC;EAC/C,MAAMa,QAAQ,GAAG,MAAMD,KAAK,CAACT,IAAI,EAAE;EACnC;EACA,IAAI,CAACW,KAAK,CAACC,OAAO,CAACF,QAAQ,CAACG,KAAK,CAAC,EAAE;IAClC;IACA,MAAM;MAAEC;IAAU,CAAE,GAAGjB,WAAW;IAClC,IAAIiB,UAAU,EAAE;MACd,OAAOA,UAAU,CAACJ,QAAQ,CAACG,KAAK,CAAe;MAC/C,WAAW,MAAME,IAAI,IAAIN,KAAK,EAAE;QAC9B,OAAOK,UAAU,CAACC,IAAI,CAAe;MACvC;IACF,CAAC,MAAM;MACL,MAAML,QAAQ,CAACG,KAAK;MACpB;MACA,OAAOJ,KAAmD;IAC5D;EACF,CAAC,MAAM;IACL,OAAOC,QAAQ,CAACG,KAAK;IACrB,WAAW,MAAME,IAAI,IAAIN,KAAK,EAAE;MAC9B;MACA;MACA,OAAOM,IAA6B;IACtC;EACF;AACF;AAEA,gBAAgBR,oBAAoBA,CAClCV,WAAqD,EACrDmB,OAAA,GAGI,EAAE;EAEN,MAAM;IAAER,QAAQ;IAAEF;EAAW,CAAE,GAAGU,OAAO;EACzC,IAAIC,QAAQ,GAAG,MAAMpB,WAAW,CAACqB,OAAO,CAACV,QAAQ,IAAIX,WAAW,CAACsB,aAAa,EAAEb,WAAW,CAAC;EAC5F,IAAI,CAACW,QAAQ,EAAE;IACb;EACF;EACA,MAAMA,QAAQ,CAACF,IAAI;EACnB,OAAOE,QAAQ,CAACG,YAAY,EAAE;IAC5BH,QAAQ,GAAG,MAAMpB,WAAW,CAACqB,OAAO,CAACD,QAAQ,CAACG,YAAY,EAAEd,WAAW,CAAC;IACxE,IAAI,CAACW,QAAQ,EAAE;MACb;IACF;IACA,MAAMA,QAAQ,CAACF,IAAI;EACrB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}