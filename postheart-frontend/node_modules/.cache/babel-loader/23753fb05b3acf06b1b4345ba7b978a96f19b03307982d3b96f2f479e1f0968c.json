{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\n/**\n * Creates a policy that assigns a unique request id to outgoing requests.\n * @param requestIdHeaderName - The name of the header to use when assigning the unique id to the request.\n */\nexport function generateClientRequestIdPolicy(requestIdHeaderName = \"x-ms-client-request-id\") {\n  return {\n    create: (nextPolicy, options) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    }\n  };\n}\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, options, _requestIdHeaderName) {\n    super(nextPolicy, options);\n    this._requestIdHeaderName = _requestIdHeaderName;\n  }\n  sendRequest(request) {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, request.requestId);\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}","map":{"version":3,"names":["BaseRequestPolicy","generateClientRequestIdPolicy","requestIdHeaderName","create","nextPolicy","options","GenerateClientRequestIdPolicy","constructor","_requestIdHeaderName","sendRequest","request","headers","contains","set","requestId","_nextPolicy"],"sources":["C:\\Users\\leoda\\OneDrive\\Documents\\GitHub\\PostHeart-Frontend\\node_modules\\@azure\\core-http\\src\\policies\\generateClientRequestIdPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { WebResourceLike } from \"../webResource\";\n\n/**\n * Creates a policy that assigns a unique request id to outgoing requests.\n * @param requestIdHeaderName - The name of the header to use when assigning the unique id to the request.\n */\nexport function generateClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\"\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new GenerateClientRequestIdPolicy(nextPolicy, options, requestIdHeaderName);\n    },\n  };\n}\n\nexport class GenerateClientRequestIdPolicy extends BaseRequestPolicy {\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptions,\n    private _requestIdHeaderName: string\n  ) {\n    super(nextPolicy, options);\n  }\n\n  public sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!request.headers.contains(this._requestIdHeaderName)) {\n      request.headers.set(this._requestIdHeaderName, request.requestId);\n    }\n    return this._nextPolicy.sendRequest(request);\n  }\n}\n"],"mappings":"AAAA;AACA;AAEA,SACEA,iBAAiB,QAIZ,iBAAiB;AAIxB;;;;AAIA,OAAM,SAAUC,6BAA6BA,CAC3CC,mBAAmB,GAAG,wBAAwB;EAE9C,OAAO;IACLC,MAAM,EAAEA,CAACC,UAAyB,EAAEC,OAA6B,KAAI;MACnE,OAAO,IAAIC,6BAA6B,CAACF,UAAU,EAAEC,OAAO,EAAEH,mBAAmB,CAAC;IACpF;GACD;AACH;AAEA,OAAM,MAAOI,6BAA8B,SAAQN,iBAAiB;EAClEO,YACEH,UAAyB,EACzBC,OAA6B,EACrBG,oBAA4B;IAEpC,KAAK,CAACJ,UAAU,EAAEC,OAAO,CAAC;IAFlB,KAAAG,oBAAoB,GAApBA,oBAAoB;EAG9B;EAEOC,WAAWA,CAACC,OAAwB;IACzC,IAAI,CAACA,OAAO,CAACC,OAAO,CAACC,QAAQ,CAAC,IAAI,CAACJ,oBAAoB,CAAC,EAAE;MACxDE,OAAO,CAACC,OAAO,CAACE,GAAG,CAAC,IAAI,CAACL,oBAAoB,EAAEE,OAAO,CAACI,SAAS,CAAC;;IAEnE,OAAO,IAAI,CAACC,WAAW,CAACN,WAAW,CAACC,OAAO,CAAC;EAC9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}