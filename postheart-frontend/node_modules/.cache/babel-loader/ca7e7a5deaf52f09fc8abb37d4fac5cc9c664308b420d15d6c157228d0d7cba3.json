{"ast":null,"code":"// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\nimport { BaseRequestPolicy } from \"./requestPolicy\";\nimport { XML_CHARKEY } from \"../util/serializer.common\";\nimport { MapperType } from \"../serializer\";\nimport { RestError } from \"../restError\";\nimport { parseXML } from \"../util/xml\";\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(deserializationContentTypes, parsingOptions) {\n  return {\n    create: (nextPolicy, options) => {\n      return new DeserializationPolicy(nextPolicy, options, deserializationContentTypes, parsingOptions);\n    }\n  };\n}\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\nexport const DefaultDeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes\n  }\n};\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  constructor(nextPolicy, requestPolicyOptions, deserializationContentTypes, parsingOptions = {}) {\n    var _a;\n    super(nextPolicy, requestPolicyOptions);\n    this.jsonContentTypes = deserializationContentTypes && deserializationContentTypes.json || defaultJsonContentTypes;\n    this.xmlContentTypes = deserializationContentTypes && deserializationContentTypes.xml || defaultXmlContentTypes;\n    this.xmlCharKey = (_a = parsingOptions.xmlCharKey) !== null && _a !== void 0 ? _a : XML_CHARKEY;\n  }\n  async sendRequest(request) {\n    return this._nextPolicy.sendRequest(request).then(response => deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {\n      xmlCharKey: this.xmlCharKey\n    }));\n  }\n}\nfunction getOperationResponse(parsedResponse) {\n  let result;\n  const request = parsedResponse.request;\n  const operationSpec = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\nfunction shouldDeserializeResponse(parsedResponse) {\n  const shouldDeserialize = parsedResponse.request.shouldDeserialize;\n  let result;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n/**\n * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.\n * @param jsonContentTypes - Response content types to parse the body as JSON.\n * @param xmlContentTypes  - Response content types to parse the body as XML.\n * @param response - HTTP Response from the pipeline.\n * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.\n * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.\n */\nexport function deserializeResponseBody(jsonContentTypes, xmlContentTypes, response, options = {}) {\n  var _a, _b, _c;\n  const updatedOptions = {\n    rootName: (_a = options.rootName) !== null && _a !== void 0 ? _a : \"\",\n    includeRoot: (_b = options.includeRoot) !== null && _b !== void 0 ? _b : false,\n    xmlCharKey: (_c = options.xmlCharKey) !== null && _c !== void 0 ? _c : XML_CHARKEY\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(parsedResponse => {\n    if (!shouldDeserializeResponse(parsedResponse)) {\n      return parsedResponse;\n    }\n    const operationSpec = parsedResponse.request.operationSpec;\n    if (!operationSpec || !operationSpec.responses) {\n      return parsedResponse;\n    }\n    const responseSpec = getOperationResponse(parsedResponse);\n    const {\n      error,\n      shouldReturnResponse\n    } = handleErrorResponse(parsedResponse, operationSpec, responseSpec);\n    if (error) {\n      throw error;\n    } else if (shouldReturnResponse) {\n      return parsedResponse;\n    }\n    // An operation response spec does exist for current status code, so\n    // use it to deserialize the response.\n    if (responseSpec) {\n      if (responseSpec.bodyMapper) {\n        let valueToDeserialize = parsedResponse.parsedBody;\n        if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof valueToDeserialize === \"object\" ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName] : [];\n        }\n        try {\n          parsedResponse.parsedBody = operationSpec.serializer.deserialize(responseSpec.bodyMapper, valueToDeserialize, \"operationRes.parsedBody\", options);\n        } catch (innerError) {\n          const restError = new RestError(`Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);\n          throw restError;\n        }\n      } else if (operationSpec.httpMethod === \"HEAD\") {\n        // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n        parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n      }\n      if (responseSpec.headersMapper) {\n        parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(responseSpec.headersMapper, parsedResponse.headers.toJson(), \"operationRes.parsedHeaders\", options);\n      }\n    }\n    return parsedResponse;\n  });\n}\nfunction isOperationSpecEmpty(operationSpec) {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return expectedStatusCodes.length === 0 || expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\";\n}\nfunction handleErrorResponse(parsedResponse, operationSpec, responseSpec) {\n  var _a;\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode = isOperationSpecEmpty(operationSpec) ? isSuccessByStatus : !!responseSpec;\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return {\n          error: null,\n          shouldReturnResponse: false\n        };\n      }\n    } else {\n      return {\n        error: null,\n        shouldReturnResponse: false\n      };\n    }\n  }\n  const errorResponseSpec = responseSpec !== null && responseSpec !== void 0 ? responseSpec : operationSpec.responses.default;\n  const streaming = ((_a = parsedResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(parsedResponse.status)) || parsedResponse.request.streamResponseBody;\n  const initialErrorMessage = streaming ? `Unexpected status code: ${parsedResponse.status}` : parsedResponse.bodyAsText;\n  const error = new RestError(initialErrorMessage, undefined, parsedResponse.status, parsedResponse.request, parsedResponse);\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let parsedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize = typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(defaultBodyMapper, valueToDeserialize, \"error.response.parsedBody\");\n      }\n      const internalError = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n      if (defaultBodyMapper) {\n        error.response.parsedBody = parsedError;\n      }\n    }\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response.parsedHeaders = operationSpec.serializer.deserialize(defaultHeadersMapper, parsedResponse.headers.toJson(), \"operationRes.parsedHeaders\");\n    }\n  } catch (defaultError) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n  return {\n    error,\n    shouldReturnResponse: false\n  };\n}\nfunction parse(jsonContentTypes, xmlContentTypes, operationResponse, opts) {\n  var _a;\n  const errorHandler = err => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(msg, errCode, operationResponse.status, operationResponse.request, operationResponse);\n    return Promise.reject(e);\n  };\n  const streaming = ((_a = operationResponse.request.streamResponseStatusCodes) === null || _a === void 0 ? void 0 : _a.has(operationResponse.status)) || operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents = !contentType ? [] : contentType.split(\";\").map(component => component.toLowerCase());\n    if (contentComponents.length === 0 || contentComponents.some(component => jsonContentTypes.indexOf(component) !== -1)) {\n      return new Promise(resolve => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some(component => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text, opts).then(body => {\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }).catch(errorHandler);\n    }\n  }\n  return Promise.resolve(operationResponse);\n}","map":{"version":3,"names":["BaseRequestPolicy","XML_CHARKEY","MapperType","RestError","parseXML","deserializationPolicy","deserializationContentTypes","parsingOptions","create","nextPolicy","options","DeserializationPolicy","defaultJsonContentTypes","defaultXmlContentTypes","DefaultDeserializationOptions","expectedContentTypes","json","xml","constructor","requestPolicyOptions","jsonContentTypes","xmlContentTypes","xmlCharKey","_a","sendRequest","request","_nextPolicy","then","response","deserializeResponseBody","getOperationResponse","parsedResponse","result","operationSpec","operationResponseGetter","responses","status","shouldDeserializeResponse","shouldDeserialize","undefined","updatedOptions","rootName","includeRoot","_b","_c","parse","responseSpec","error","shouldReturnResponse","handleErrorResponse","bodyMapper","valueToDeserialize","parsedBody","isXML","type","name","Sequence","xmlElementName","serializer","deserialize","innerError","restError","bodyAsText","httpMethod","headersMapper","parsedHeaders","headers","toJson","isOperationSpecEmpty","expectedStatusCodes","Object","keys","length","isSuccessByStatus","isExpectedStatusCode","isError","errorResponseSpec","default","streaming","streamResponseStatusCodes","has","streamResponseBody","initialErrorMessage","defaultBodyMapper","defaultHeadersMapper","parsedError","internalError","code","message","defaultError","operationResponse","opts","errorHandler","err","msg","errCode","PARSE_ERROR","e","Promise","reject","text","contentType","get","contentComponents","split","map","component","toLowerCase","some","indexOf","resolve","JSON","catch","body"],"sources":["C:\\Users\\leoda\\OneDrive\\Documents\\GitHub\\PostHeart-Frontend\\node_modules\\@azure\\core-http\\src\\policies\\deserializationPolicy.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  BaseRequestPolicy,\n  RequestPolicy,\n  RequestPolicyFactory,\n  RequestPolicyOptions,\n} from \"./requestPolicy\";\nimport { SerializerOptions, XML_CHARKEY } from \"../util/serializer.common\";\nimport { HttpOperationResponse } from \"../httpOperationResponse\";\nimport { MapperType } from \"../serializer\";\nimport { OperationResponse } from \"../operationResponse\";\nimport { OperationSpec } from \"../operationSpec\";\nimport { RestError } from \"../restError\";\nimport { WebResourceLike } from \"../webResource\";\nimport { parseXML } from \"../util/xml\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes: DeserializationContentTypes;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * Create a new serialization RequestPolicyCreator that will serialized HTTP request bodies as they\n * pass through the HTTP pipeline.\n */\nexport function deserializationPolicy(\n  deserializationContentTypes?: DeserializationContentTypes,\n  parsingOptions?: SerializerOptions\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptions) => {\n      return new DeserializationPolicy(\n        nextPolicy,\n        options,\n        deserializationContentTypes,\n        parsingOptions\n      );\n    },\n  };\n}\n\nexport const defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nexport const defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\nexport const DefaultDeserializationOptions: DeserializationOptions = {\n  expectedContentTypes: {\n    json: defaultJsonContentTypes,\n    xml: defaultXmlContentTypes,\n  },\n};\n\n/**\n * A RequestPolicy that will deserialize HTTP response bodies and headers as they pass through the\n * HTTP pipeline.\n */\nexport class DeserializationPolicy extends BaseRequestPolicy {\n  public readonly jsonContentTypes: string[];\n  public readonly xmlContentTypes: string[];\n  public readonly xmlCharKey: string;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    requestPolicyOptions: RequestPolicyOptions,\n    deserializationContentTypes?: DeserializationContentTypes,\n    parsingOptions: SerializerOptions = {}\n  ) {\n    super(nextPolicy, requestPolicyOptions);\n\n    this.jsonContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.json) || defaultJsonContentTypes;\n    this.xmlContentTypes =\n      (deserializationContentTypes && deserializationContentTypes.xml) || defaultXmlContentTypes;\n    this.xmlCharKey = parsingOptions.xmlCharKey ?? XML_CHARKEY;\n  }\n\n  public async sendRequest(request: WebResourceLike): Promise<HttpOperationResponse> {\n    return this._nextPolicy.sendRequest(request).then((response: HttpOperationResponse) =>\n      deserializeResponseBody(this.jsonContentTypes, this.xmlContentTypes, response, {\n        xmlCharKey: this.xmlCharKey,\n      })\n    );\n  }\n}\n\nfunction getOperationResponse(\n  parsedResponse: HttpOperationResponse\n): undefined | OperationResponse {\n  let result: OperationResponse | undefined;\n  const request: WebResourceLike = parsedResponse.request;\n  const operationSpec: OperationSpec | undefined = request.operationSpec;\n  if (operationSpec) {\n    const operationResponseGetter:\n      | undefined\n      | ((\n          operationSpec: OperationSpec,\n          response: HttpOperationResponse\n        ) => undefined | OperationResponse) = request.operationResponseGetter;\n    if (!operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: HttpOperationResponse): boolean {\n  const shouldDeserialize: undefined | boolean | ((response: HttpOperationResponse) => boolean) =\n    parsedResponse.request.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\n/**\n * Given a particular set of content types to parse as either JSON or XML, consumes the HTTP response to produce the result object defined by the request's {@link OperationSpec}.\n * @param jsonContentTypes - Response content types to parse the body as JSON.\n * @param xmlContentTypes  - Response content types to parse the body as XML.\n * @param response - HTTP Response from the pipeline.\n * @param options  - Options to the serializer, mostly for configuring the XML parser if needed.\n * @returns A parsed {@link HttpOperationResponse} object that can be returned by the {@link ServiceClient}.\n */\nexport function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: HttpOperationResponse,\n  options: SerializerOptions = {}\n): Promise<HttpOperationResponse> {\n  const updatedOptions: Required<SerializerOptions> = {\n    rootName: options.rootName ?? \"\",\n    includeRoot: options.includeRoot ?? false,\n    xmlCharKey: options.xmlCharKey ?? XML_CHARKEY,\n  };\n  return parse(jsonContentTypes, xmlContentTypes, response, updatedOptions).then(\n    (parsedResponse) => {\n      if (!shouldDeserializeResponse(parsedResponse)) {\n        return parsedResponse;\n      }\n\n      const operationSpec = parsedResponse.request.operationSpec;\n      if (!operationSpec || !operationSpec.responses) {\n        return parsedResponse;\n      }\n\n      const responseSpec = getOperationResponse(parsedResponse);\n\n      const { error, shouldReturnResponse } = handleErrorResponse(\n        parsedResponse,\n        operationSpec,\n        responseSpec\n      );\n      if (error) {\n        throw error;\n      } else if (shouldReturnResponse) {\n        return parsedResponse;\n      }\n\n      // An operation response spec does exist for current status code, so\n      // use it to deserialize the response.\n      if (responseSpec) {\n        if (responseSpec.bodyMapper) {\n          let valueToDeserialize: any = parsedResponse.parsedBody;\n          if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperType.Sequence) {\n            valueToDeserialize =\n              typeof valueToDeserialize === \"object\"\n                ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n                : [];\n          }\n          try {\n            parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n              responseSpec.bodyMapper,\n              valueToDeserialize,\n              \"operationRes.parsedBody\",\n              options\n            );\n          } catch (innerError: any) {\n            const restError = new RestError(\n              `Error ${innerError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n              undefined,\n              parsedResponse.status,\n              parsedResponse.request,\n              parsedResponse\n            );\n            throw restError;\n          }\n        } else if (operationSpec.httpMethod === \"HEAD\") {\n          // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n          parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n        }\n\n        if (responseSpec.headersMapper) {\n          parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n            responseSpec.headersMapper,\n            parsedResponse.headers.toJson(),\n            \"operationRes.parsedHeaders\",\n            options\n          );\n        }\n      }\n\n      return parsedResponse;\n    }\n  );\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: HttpOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponse | undefined\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n  const streaming =\n    parsedResponse.request.streamResponseStatusCodes?.has(parsedResponse.status) ||\n    parsedResponse.request.streamResponseBody;\n  const initialErrorMessage = streaming\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(\n    initialErrorMessage,\n    undefined,\n    parsedResponse.status,\n    parsedResponse.request,\n    parsedResponse\n  );\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let parsedError;\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperType.Sequence) {\n          valueToDeserialize =\n            typeof parsedBody === \"object\" ? parsedBody[defaultBodyMapper.xmlElementName!] : [];\n        }\n        parsedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\"\n        );\n      }\n\n      const internalError: any = parsedBody.error || parsedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        error.response!.parsedBody = parsedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      error.response!.parsedHeaders = operationSpec.serializer.deserialize(\n        defaultHeadersMapper,\n        parsedResponse.headers.toJson(),\n        \"operationRes.parsedHeaders\"\n      );\n    }\n  } catch (defaultError: any) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nfunction parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: HttpOperationResponse,\n  opts: Required<SerializerOptions>\n): Promise<HttpOperationResponse> {\n  const errorHandler = (err: Error & { code: string }): Promise<never> => {\n    const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n    const errCode = err.code || RestError.PARSE_ERROR;\n    const e = new RestError(\n      msg,\n      errCode,\n      operationResponse.status,\n      operationResponse.request,\n      operationResponse\n    );\n    return Promise.reject(e);\n  };\n\n  const streaming =\n    operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) ||\n    operationResponse.request.streamResponseBody;\n  if (!streaming && operationResponse.bodyAsText) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n    if (\n      contentComponents.length === 0 ||\n      contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n    ) {\n      return new Promise<HttpOperationResponse>((resolve) => {\n        operationResponse.parsedBody = JSON.parse(text);\n        resolve(operationResponse);\n      }).catch(errorHandler);\n    } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n      return parseXML(text, opts)\n        .then((body) => {\n          operationResponse.parsedBody = body;\n          return operationResponse;\n        })\n        .catch(errorHandler);\n    }\n  }\n\n  return Promise.resolve(operationResponse);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}